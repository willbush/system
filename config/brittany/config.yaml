# comments taking from:
# https://github.com/lspitzner/brittany/blob/master/src/Language/Haskell/Brittany/Internal/Config/Types.hs#L52

conf_debug:
  dconf_roundtrip_exactprint_only: false
  dconf_dump_bridoc_simpl_par: false
  dconf_dump_ast_unknown: false
  dconf_dump_bridoc_simpl_floating: false
  dconf_dump_config: false
  dconf_dump_bridoc_raw: false
  dconf_dump_bridoc_final: false
  dconf_dump_bridoc_simpl_alt: false
  dconf_dump_bridoc_simpl_indent: false
  dconf_dump_annotations: false
  dconf_dump_bridoc_simpl_columns: false
  dconf_dump_ast_full: false
conf_forward:
  options_ghc: []
conf_errorHandling:

  # Determines when to fall back on the exactprint'ed output when syntactical
  # constructs are encountered which are not yet handled by brittany.
  #
  # Note that the "risky" setting is risky because even with the check of the
  # syntactic validity of the brittany output, at least in theory there may be
  # cases where the output is syntactically/semantically valid but has different
  # semantics than the code pre-transformation.
  #
  # Possible values:
  # - ExactPrintFallbackModeNever :: never fall back on exactprinting
  #
  # - ExactPrintFallbackModeInline :: fall back only if there are no newlines in
  #   the exactprint'ed output.
  #
  # - ExactPrintFallbackModeRisky :: fall back even in the presence of newlines.
  #   THIS MAY THEORETICALLY CHANGE SEMANTICS OF A PROGRAM BY TRANSFORMING IT.
  econf_ExactPrintFallback: ExactPrintFallbackModeInline
  econf_Werror: false
  econf_omit_output_valid_check: false
  econf_produceOutputOnErrors: false
conf_preprocessor:
  ppconf_CPPMode: CPPModeAbort
  ppconf_hackAroundIncludes: false

# This field is somewhat of a duplicate of the one in DebugConfig. It is used
# for per-declaration disabling by the inline config implementation. Could have
# re-used the existing field, but felt risky to use a "debug" labeled field for
# non-debug functionality.
conf_obfuscate: false
conf_roundtrip_exactprint_only: false
conf_version: 1
conf_layout:

  # whether the module preamble/header (module keyword, name, export list,
  # import statements) are reformatted. If false, only the elements of the
  # module (everything past the "where") are reformatted.
  lconfig_reformatModulePreamble: true

  # Possible values:
  # - AltChooserSimpleQuick :: always choose last alternative. leads to tons of
  #   sparsely filled lines.
  #
  # - AltChooserShallowBest :: choose the first matching alternative using the
  #   simplest spacing information for the children.
  #
  # - AltChooserBoundedSearch Int :: choose the first matching alternative using
  #   a bounded list of recursive options having sufficient space.
  lconfig_altChooser:
    tag: AltChooserBoundedSearch
    contents: 3

  #  if true, and it fits in a single line, and there are no comments in the
  #  export list, the following layout will be used:
  #  > module MyModule (abc, def) where
  #  > [stuff]
  #  otherwise, the multi-line version is used:
  #  > module MyModule
  #  >   ( abc
  #  >   , def
  #  >   )
  #  > where
  lconfig_allowSingleLineExportList: true

  #  Do not put "::" in a new line, and use hanging indentation for the
  #  signature, i.e.:
  #  func :: SomeLongStuff
  #       -> SomeLongStuff
  #  instead of the usual
  #  func
  #    :: SomeLongStuff
  #    -> SomeLongStuff
  #  As usual for hanging indentation, the result will be
  #  context-sensitive (in the function name).
  lconfig_hangingTypeSignature: false

  # For import statement layouting, column at which to align the elements to be
  # imported from a module. It is expected that importAsColumn >= importCol.
  lconfig_importColumn: 50

  # For import statement layouting, column at which put the module's "as" name
  # (which also affects the positioning of the "as" keyword). It is expected
  # that importAsColumn >= importCol.
  # The column at which 
  lconfig_importAsColumn: 50

  # roughly speaking, this sets an upper bound to the number of spaces inserted
  # to create horizontal alignment. More specifically, if 'xs' are the widths of
  # the columns in some alignment-block, then the block will be aligned with the
  # width maximum [ x | x <- xs, x < minimum xs + alignmentLimit ].
  lconfig_alignmentLimit: 30

  # Use some special indentation for "," when creating zero-indentation
  # multi-line list literals.
  lconfig_indentListSpecial: true

  # indent "where" only 1 sometimes.
  lconfig_indentWhereSpecial: true

  lconfig_indentAmount: 2

  # stops alignment between items that are not layouted as a single line.
  #  e.g. for single-line alignment, things remain unchanged:
  #    do
  #      short       <- stuff
  #      loooooooong <- stuff
  #  but not in cases such as:
  #    do
  #      short <- some more stuff
  #        that requires two lines
  #      loooooooong <- stuff
  lconfig_alignmentBreakOnMultiline: true
  lconfig_cols: 80

  # Possible values:
  # - IndentPolicyLeft :: Never create a new indentation at more than old indentation + amount
  # - IndentPolicyFree :: Can create new indentations where-ever
  # - IndentPolicyMultiple :: Can create indentations only at any n * amount.
  lconfig_indentPolicy: IndentPolicyFree


  # Possible Values:
  # - ColumnAlignModeDisabled :: Make no column alignments whatsoever
  #
  # - ColumnAlignModeUnanimously :: Make column alignments only if it does not
  #   cause overflow for any of the affected lines.
  #
  # - ColumnAlignModeMajority Float :: If at least (ratio::Float) of the aligned
  #   elements have sufficient space for the alignment, act like
  #   ColumnAlignModeAnimously; otherwise act like ColumnAlignModeDisabled.
  #
  # - ColumnAlignModeAnimouslyScale Int :: Scale back columns to some degree if
  #   their sum leads to overflow. This is done in a linear fashion. The Int
  #   specifies additional columns to be added to column maximum for scaling
  #   calculation purposes.
  #
  # - ColumnAlignModeAnimously :: Decide on a case-by-case basis if alignment
  #   would cause overflow. If it does, cancel all alignments for this (nested)
  #   column description. ColumnAlignModeAnimouslySome -- potentially to
  #   implement
  #
  # - ColumnAlignModeAlways :: Always respect column alignments, even if it
  #   makes stuff overflow.
  lconfig_columnAlignMode:
    tag: ColumnAlignModeMajority
    contents: 0.7
