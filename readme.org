* System Configuration

Everything needed to build my NixOS system.

** NixOS
*** Build Custom ISO

I have a custom bootable ISO that provides a graphical environment similar to
the one in nixpkgs with a few nice to have tools and my Emacs configuration for
installing NixOS.

To build it:

#+begin_src shell
git clone https://github.com/willbush/system.git
cd system
nix build ".#iso"
#+end_src

The ISO will be in the ~./result/iso~ build result folder.

*** Install

The primary source of documentation for installing NixOS is the [[https://nixos.org/manual/nixos/stable/][manual]]. The
following are my own notes on how I install things in various situations. I
thought about making a install script that [[https://xkcd.com/1319/][automates]] most of this for me, but it
just doesn't seem worth it with the varying use cases and low frequency of
re-formatting.

**** [[https://virt-manager.org/][Virt Manager]]

1. File > New virtual machine > Forward.
2. Choose ISO > Forward (it should auto-detect that it's NixOS).
3. Choose Memory and CPU amount (~4 CPUs and ~6148 RAM when host can afford it)
   > Forward.
4. Choose available disk size (I usually increase to 30 GiB) > Forward.
5. Check the ~Customize configuration before install~ to boot as UEFI instead of
   legacy BIOS > Forward.
6. In the Overview section change the Firmware from BIOS to UEFI > Apply
7. In the Video QXL section change the model Virtio and enable 3D acceleration
   (allows increasing desktop resolution) > Apply > Begin Installation.
8. Once booted into the ISO the first thing I do is increase the resolution
   (Display Configuration for plasma5).

**** Basic partitioning without encryption or dual booting

The following is mostly just following the manual instructions [[https://nixos.org/manual/nixos/stable/index.html#sec-installation-partitioning-UEFI][here]]. Note that
one can wipe all the file systems on a device using ~sudo wipefs -a device~ (e.g.
~sudo wipefs -a /dev/sda~) which is useful to start over or prepare a device.

1. Open a parted REPL: ~sudo parted~
2. Print all devices to determine the device to format: ~print all~
3. Select device: ~select /dev/sda~ (Note the exact disk depends on your ~print all~ output.)
4. Create a GPT partition table: ~mklabel gpt~
5. Add the root partition.

   #+begin_src shell
   mkpart primary 512MiB -2GiB
   #+end_src

   This leaves space in the front of the disk (512MiB) for the boot partition and
   space at the end for swap partition. Adjust swap size as desired.

6. Add a swap partition: ~mkpart primary linux-swap -2GiB 100%~
7. Finally, the boot partition:

   #+begin_src shell
   mkpart ESP fat32 1MiB 512MiB
   set 3 esp on
   #+end_src

   Note that ~3~ is the disk number which you can see in ~print~ output. Your
   disk number might be different if you're doing things in a different order.

8. ~print~ to verify and ~quit~ to quit.

9. Create ext4 file system: ~sudo mkfs.ext4 -L nixos /dev/sda1~
10. Create swap area: ~sudo mkswap -L swap /dev/sda2~
11. Create fat file system for boot partition: ~sudo mkfs.fat -F 32 -n boot /dev/sda3~

**** Installing

1. Mount the target NixOS file system:

   #+begin_src shell
   sudo mount /dev/disk/by-label/nixos /mnt
   sudo mkdir -p /mnt/boot
   sudo mount /dev/disk/by-label/boot /mnt/boot
    #+end_src

2. Enable swap if needed

   For old devices with limited RAM that depend on the swap space, activate swap
   device now:

   #+begin_src shell
   sudo swapon /dev/sda2
   #+end_src

3. Prepare the configuration

   #+begin_src shell
   sudo nixos-generate-config --root /mnt
   cd /mnt/etc/nixos
   sudo git clone https://github.com/willbush/system.git
   #+end_src

   For a new machine setup the new machine in ~flake.nix~ and under
   ~./system/machines/~ using the generated ~hardware-configuration.nix~.

   Change the hashed user passwords in ~user.nix~. These hashed passwords can be
   generated with ~mkpasswd -m sha-512~.

   Disable anything that depends on unlocking the encrypted secrets folder.

   Be sure to stage all new files created in repository as required for flakes.

4. Install

   Replace betelgeuse in the following command with your machine name.

   #+begin_src shell
   sudo nixos-install --flake /mnt/etc/nixos/system/#betelgeuse --no-root-passwd --impure
   reboot
   #+end_src

   Notes:

   - No root password needs to be created because it should be specified in
     ~user.nix~ as a hashed password.
   - Impure flag is needed because nix thinks ~/mnt/nix/store~ as a non-store
     path.

5. Move system repository

   After booting into the newly installation, I personally prefer my system
   repository in my home directory (change the user as needed):

   #+begin_src shell
   sudo mv /etc/nixos/system ~/
   sudo chown -R will ~/system/
   #+end_src

*** Update

To update all the flake inputs:

#+begin_src shell
nix flake update --recreate-lock-file
#+end_src

To up update a single input:

#+begin_src shell
nix flake update --update-input nixpkgs
#+end_src

*** Nix Repl

To open the flake in a ~nix repl~ do the following:

#+begin_src shell
nix run '.#repl'
#+end_src

*** Switch

Build and switch to the generation provided by the flake for machine / host
name:

#+begin_src shell
sudo nixos-rebuild switch --flake <PATH_TO_GIT_REPO>#<MACHINE>
#+end_src

For example:

#+begin_src shell
git clone https://github.com/willbush/system.git
cd system
sudo nixos-rebuild switch --flake '.#betelgeuse'
#+end_src

The ~.~ before the ~#~ is the path to the git repository. What comes after the
~#~ is the machine / host name which can be found enumerated in the ~flakes.nix~
file.

*** Flake Learning Resources

- https://nixos.wiki/wiki/Flakes
- [[https://github.com/tweag/rfcs/blob/flakes/rfcs/0049-flakes.md][Original RFC]]
- [[https://www.youtube.com/watch?v=UeBX7Ide5a0][Flake talk at NixConf]]
- https://www.tweag.io/blog/2020-05-25-flakes/
- https://www.tweag.io/blog/2020-06-25-eval-cache/
- https://www.tweag.io/blog/2020-07-31-nixos-flakes/

**** Flake Examples

- https://github.com/colemickens/nixos-flake-example
- https://github.com/hlissner/dotfiles
- https://github.com/lexuge
- https://github.com/nrdxp/nixflk

** Folder Structure

The following is 1 level deep directory structure generated using ~tree -L 1 -d~.

#+begin_src
.
├── config
├── config-backups
├── emacs
├── keyboard-firmware
├── machines
├── secrets
└── xmonad
#+end_src

*** config

Config files used in NixOS that are symlinked to ~/.config/~ and managed with
[[https://github.com/rycee/home-manager][home manager]].

*** config-backups

Miscellaneous configuration files that I'm backing up and are not deployed
automatically.

*** emacs

My emacs configuration code. See its [[file:emacs/readme.org][readme]] for more information.

*** keyboard-firmware

Holds my keyboard firmware code managed by Nix and the [[file:keyboard-firmware/readme.org][readme]] that goes into
depth on my key layout and customized Evil / Vim keybindings.

*** machines

Machine / host specific configuration files.

*** secrets

A place for me to store encrypted secrets using [[https://github.com/AGWA/git-crypt][git-crypt]].

*** xmonad

My Xmonad configuration code which is symlinked by home-manager. See its [[file:xmonad/readme.org][readme]]
for more information.
