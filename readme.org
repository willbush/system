* System Configuration

Everything needed to build my NixOS system. Note this is highly customized
configuration that's not targeting a wide audience. However, feel free to copy
and use any parts of if you like in your own configuration.

** Table of Contents                                                  :TOC_3:
- [[#system-configuration][System Configuration]]
- [[#folder-structure][Folder Structure]]
  - [[#configs][configs]]
    - [[#keyboard-firmware][keyboard firmware]]
    - [[#emacs--nvim][emacs / nvim]]
  - [[#hosts][hosts]]
  - [[#modules-profiles-and-users][modules, profiles, and users]]
  - [[#secrets][secrets]]
- [[#nixos][NixOS]]
  - [[#miminal-install][Miminal install]]
  - [[#switch-to-flake][Switch to flake]]
  - [[#update][Update]]
  - [[#nixos-on-wsl2][NixOS on WSL2]]
    - [[#bootstrap-my-wsl2-flake-using-nixos-wsls-provided-tarball][Bootstrap my WSL2 flake using NixOS-WSL's provided tarball]]
- [[#license][License]]

* Folder Structure

The following is 1 level deep directory structure generated using ~tree -L 1 -d~.

#+begin_src
.
├── configs
├── hosts
├── modules
├── profiles
├── secrets
└── users
#+end_src

** configs

A sort of catch all for config / non-nix code.

Some are simply configuration files that are symlinked to ~/.config/~ and managed
with [[https://github.com/rycee/home-manager][home manager]].

*** keyboard firmware

Keyboard firmware code managed by Nix and the [[file:configs/keyboard-firmware/readme.org][readme]] that goes into depth on my
key layout and customized Evil / Vim keybindings.

*** emacs / nvim

My emacs configuration code. See its [[file:configs/emacs/readme.org][readme]] for more information.

I typically only use Vim if Emacs is not available for some reason. In the
~init.vim~ file there are just the most important key bindings in my [[configs/keyboard-firmware/readme.org][customized
Evil / Vim keybindings]]

** hosts

host specific configuration files.

** modules, profiles, and users

similar to and inspired by: https://devos.divnix.com/index.html

** secrets

A place for me to store encrypted secrets using [[https://github.com/AGWA/git-crypt][git-crypt]].

* NixOS

** Miminal install

- [[https://nixos.org/download.html#nixos-iso][Download]] latest the latest graphical ISO. The Gnome vs Plasma version only affects the desktop environment the ISO boots to.

- [[https://nixos.org/manual/nixos/stable/index.html#sec-booting-from-usb][Flash it]] to a USB flash drive.

- Boot from the USB flash drive on new host machine.

- Click through Calamares installer. On Desktop step choose ~No desktop~. Don't forget to encrypt the drive.

- Reboot when done into the new NixOS install and login.

** Switch to flake

  #+begin_src shell
cd ~
mkdir code && cd code
nix-shell -p git
git clone https://github.com/willbush/system.git
cd system
  #+end_src

Bootstrap the new host by modifying the ~flake.nix~ etc. and be sure to ~git add -A~

Look up your device using ~lsblk~.

Next Install the flake using the:

#+begin_src shell
sudo nixos-rebuild switch --flake <PATH_TO_GIT_REPO>#<MACHINE>
#+end_src

For example Assuming you selected your new host name to be ~tester~ and your current directory is =~/code/system=:

#+begin_src shell
sudo nixos-rebuild switch --flake .#tester
#+end_src

If everything looks good ~reboot~ and the the temporary user / root password is ~temp~.

** Update

To update all the flake inputs:

#+begin_src shell
nix flake update
#+end_src

To up update a single input:

#+begin_src shell
nix flake update --update-input nixpkgs
#+end_src

** NixOS on WSL2

Thanks to [[https://github.com/Trundle/NixOS-WSL][NixOS-WSL]] I can run NixOS in WSL2 on Windows.

Anytime I do this, I need to check what's changed since last time and update
code copied from that repo into [[./hosts/nixos-wsl]]. Code was copied there because
they don't yet [[https://github.com/Trundle/NixOS-WSL/pull/19][have modular flake support]].

I can build my own tarball:

#+begin_src shell
nix build .#nixosConfigurations.nixos-wsl.config.system.build.tarball
#+end_src

The tarball ends up in ~./result/tarball/nixos-system-x86_64-linux.tar.gz~

Copy it over to Windows and install:

#+begin_src
PS C:\Users\will\Downloads> mkdir C:\NixOS
PS C:\Users\will\Downloads> wsl --import NixOS C:\NixOS\ .\nixos-system-x86_64-linux.tar.gz --version 2
PS C:\Users\will\Downloads> wsl -d NixOS
$ /nix/var/nix/profiles/system/activate
$ exit
#+end_src

Set NixOS as the default ~wsl -s NixOS~ and ~wsl~ will now take me into the
NixOS distribution.

*** Bootstrap my WSL2 flake using NixOS-WSL's provided tarball

1. Download the [[https://github.com/Trundle/NixOS-WSL/releases/latest/download/nixos-system-x86_64-linux.tar.gz][tarball]] from their GitHub page.

2. Perform same steps above to install the tarball.

3. ~sudo nano /etc/nixos/configuration.nix~

   Edit the configuration to enable nix flakes and add the git package.

   #+begin_src nix
    {
      # ...
      nix = {
        package = pkgs.nixUnstable;
        extraOptions = ''
          experimental-features = nix-command flakes
        '';
      };

      # List packages installed in system profile.
      environment.systemPackages = with pkgs; [
        git
      ];
      # ...
    }
   #+end_src

   Rebuild and switch:

   #+begin_src shell
     sudo nixos-rebuild switch
   #+end_src

4. Clone this repository and rebuild switch:

   #+begin_src shell
    sudo nixos-rebuild switch --flake '/home/nixos/system/#nixos-wsl'
   #+end_src

* License

Dual licensed under either:

- Apache License, Version 2.0 ([[http://www.apache.org/licenses/LICENSE-2.0][LICENSE-APACHE]])

- MIT license ([[http://opensource.org/licenses/MIT][LICENSE-MIT]])

at your option.

However, code under the ~./hosts/nixos-wsl/~ directory is distributed solely
under the Apache License, Version 2.0. See its [[file:hosts/nixos-wsl/readme.org][readme]] for more information.
